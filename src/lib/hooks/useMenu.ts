"use client";

import { useState, useEffect } from "react";
import { MenuItem } from "types/menu";
import { fetchMainMenu, fetchMobileMenu } from "lib/api/menu.service";

interface UseMobileMenuReturn {
  mobileMenu: MenuItem[];
  isLoading: boolean;
  error: string | null;
  menuSource: "mobile" | "main" | "fallback";
}

/**
 * Custom hook ƒë·ªÉ qu·∫£n l√Ω mobile menu v·ªõi fallback logic
 *
 * T·∫°i sao c·∫ßn hook n√†y?
 * 1. Mobile UX kh√°c Desktop - c·∫ßn menu t·ªëi ∆∞u ri√™ng
 * 2. Fallback strategy khi kh√¥ng c√≥ mobile menu ri√™ng
 * 3. Client-side fetching ƒë·ªÉ tr√°nh blocking SSR
 * 4. Error handling v√† loading states
 *
 * @param fallbackMenu - Menu d·ª± ph√≤ng khi c·∫£ mobile v√† main ƒë·ªÅu fail
 * @returns Object ch·ª©a mobile menu, loading state, error v√† ngu·ªìn menu
 */
export function useMobileMenu(
  fallbackMenu: MenuItem[] = []
): UseMobileMenuReturn {
  const [mobileMenu, setMobileMenu] = useState<MenuItem[]>(fallbackMenu);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [menuSource, setMenuSource] = useState<"mobile" | "main" | "fallback">(
    "fallback"
  );

  useEffect(() => {
    const loadMobileMenu = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // B∆∞·ªõc 1: Th·ª≠ fetch mobile menu tr∆∞·ªõc
        // console.log("üîç ƒêang t√¨m mobile menu ri√™ng...");
        const mobileMenuData = await fetchMobileMenu();

        if (mobileMenuData.length > 0) {
          // C√≥ mobile menu ri√™ng -> s·ª≠ d·ª•ng lu√¥n
          setMobileMenu(mobileMenuData);
          setMenuSource("mobile");
          // console.log("‚úÖ S·ª≠ d·ª•ng mobile menu ri√™ng");
          return;
        }

        // B∆∞·ªõc 2: Kh√¥ng c√≥ mobile menu -> fallback v·ªÅ main menu
        // console.log("‚ö†Ô∏è Kh√¥ng c√≥ mobile menu ri√™ng, fallback v·ªÅ main menu...");
        const mainMenuData = await fetchMainMenu();

        if (mainMenuData.length > 0) {
          // C√≥ main menu -> s·ª≠ d·ª•ng cho mobile
          setMobileMenu(mainMenuData);
          setMenuSource("main");
          // console.log("‚úÖ S·ª≠ d·ª•ng main menu cho mobile");
          return;
        }

        // B∆∞·ªõc 3: C·∫£ hai ƒë·ªÅu fail -> s·ª≠ d·ª•ng fallback
        // console.log("‚ö†Ô∏è C·∫£ mobile v√† main menu ƒë·ªÅu fail, d√πng fallback menu");
        setMobileMenu(fallbackMenu);
        setMenuSource("fallback");
      } catch (err) {
        const errorMessage =
          err instanceof Error ? err.message : "Unknown error";
        console.error("‚ùå L·ªói trong useMobileMenu:", errorMessage);

        setError(errorMessage);
        setMobileMenu(fallbackMenu);
        setMenuSource("fallback");
      } finally {
        setIsLoading(false);
      }
    };

    // Ch·ªâ load khi ·ªü client-side ƒë·ªÉ tr√°nh hydration mismatch
    if (typeof window !== "undefined") {
      loadMobileMenu();
    } else {
      // Server-side: s·ª≠ d·ª•ng fallback menu
      setIsLoading(false);
    }
  }, [fallbackMenu]);

  return {
    mobileMenu,
    isLoading,
    error,
    menuSource,
  };
}
